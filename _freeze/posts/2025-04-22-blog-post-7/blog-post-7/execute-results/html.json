{
  "hash": "5c47d07d85bd721953c0b4e258b8bfd0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Blog Post 7\"\nauthor: \"\"\ndate: \"2025-04-22\"\ndate-modified: \"2025-04-22\"\ndraft: FALSE\nfilters:\n  - shinylive\n---\n\n\nThis week, we developed an interactive Shiny app for our final project using the CalEnviroScreen dataset. The app allows users to explore pollution burden scores by selecting a county and a demographic group. It dynamically visualizes how the percentage of a specific group relates to pollution levels within that county.\n\nOur interactive supports both broad trend exploration and zoomed-in analysis of local data. It includes user input for customization and a clean layout for clarity. We're planning to add brief instructions to guide users through the visualizations.\n\nWe’re also exploring a new feature that compares a selected county’s average pollution burden score to the statewide average. This would make the tool more personal, helping California residents understand how their local environment compares to the rest of the state.\n\nNext steps include:\n\nImplementing the county vs. state average comparison.\n\nImproving the app’s visual design.\n\nHighlighting counties with especially high pollution burdens.\n\nWe’re excited to keep refining the tool to make the data more accessible, informative, and engaging.\n\n\n\n\n::: {.cell standalone='true' viewerHeight='640'}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\ndata <- read_rds(here::here(\"dataset_for_shiny\", \"cleaned_dataset.rds\"))\n```\n:::\n\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 640 # You will have to adjust this to fit everything\n\n\nlibrary(shiny)\nlibrary(tidyverse)\noptions(\"readr.edition\" = 1) # keep this to ensure you can download the data\n\n\n# Define UI for app that draws a histogram ----\nui <- fluidPage(\n\n  # App title ----\n  titlePanel(\"Hello Shiny!\"),\n\n  # Sidebar layout with input and output definitions ----\n  verticalLayout(\n      # Input: Slider for the number of bins ----\n      sliderInput(inputId = \"bins\",\n                  label = \"Number of bins:\",\n                  min = 1,\n                  max = 50,\n                  value = 30),\n\n      # Output: Histogram ----\n      plotOutput(outputId = \"distPlot\")\n\n  )\n)\n\n# Define server logic required to draw a histogram ----\nserver <- function(input, output) {\n  # The URL below has to point to a dataset on your github pages website\n  # I recommend creating a small-ish rds file that has only the data relevant to \n  # the interactive.\n  data <- read_rds(\"https://sussmanbu.github.io/ma4615-final-project-quarto/dataset_for_shiny/loan_refusal_clean.rds\")\n  \n  output$distPlot <- renderPlot({\n    ggplot(data, aes(x = refusal_rate)) +\n      geom_histogram(bins = input$bins + 1)\n\n  })\n\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n```",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}